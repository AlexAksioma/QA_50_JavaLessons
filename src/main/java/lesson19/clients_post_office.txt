N клиентов ждут в очереди, чтобы забрать свои посылки в почтовом отделении.
Посылки приходят в почтовое отделение одна за другой.
Для простоты мы пронумеруем посылки от 1 до N в порядке их поступления.
Каждый клиент хочет забрать одну посылку;
K-й клиент в очереди (для K от 0 до N-1) хочет забрать посылку с номером client[K].

После прибытия посылки происходит одно из следующих событий:
если первый клиент в очереди хочет забрать посылку, он забирает ее и выходит из очереди;
в противном случае посылка кладется на полку.

Если первый клиент хочет забрать посылку с полки, он выходит из очереди и забирает посылку.
Обратите внимание, что только первый клиент из очереди может забрать свою посылку.
Сколько посылок будет храниться на полке одновременно?

Напишите функцию:

класс Решение { public int method(int[] клиент); }
который, учитывая массив client, возвращает максимальное количество пакетов,
которые будут храниться на полке одновременно.

Примеры:
                 1  2  3  4  5
1. Для client = [3, 2, 4, 5, 1] функция должна вернуть 2.     // maxClient - numberIn
                 1  2
                 1
Происходят следующие события:
первый клиент ждет посылку номер 3, поэтому посылки с номерами 1 и 2 кладутся на полку,
посылка номер 3 прибывает и первый клиент ее забирает,
второй клиент забирает номер упаковки с полки;
третий и четвертый клиенты ждут посылки номер 4 и 5 и забирают их по мере поступления;
последний клиент забирает упаковку 1 с полки.

2. Для клиента = [1, 2, 3, 4, 5] функция должна возвращать 0.  //5 - 5
Каждый клиент забирает свою посылку сразу по ее прибытии.

3. Для client = [3, 2, 7, 5, 4, 1, 6] функция должна вернуть 4.
1 2(-) 4 5 6
Напишите эффективный алгоритм для следующих предположений:
N — целое число в диапазоне [1..100,000];
каждый элемент массива client представляет собой целое число в диапазоне [1..N];

все элементы клиента различны.